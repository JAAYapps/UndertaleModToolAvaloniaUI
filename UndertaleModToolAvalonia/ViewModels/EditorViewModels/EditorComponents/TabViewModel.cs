using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.ObjectModel;
using System.Windows.Input;
using UndertaleModToolAvalonia.Models.EditorModels;

namespace UndertaleModToolAvalonia.ViewModels.EditorViewModels.EditorComponents
{
    public partial class TabViewModel : ViewModelBase
    {
        public ICommand CloseCommand { get; }

        [ObservableProperty]
        private object currentObject;

        /// <summary>The tab title.</summary>
        /// <value>"Untitled" by default.</value>
        [ObservableProperty]
        public string tabTitle = "Untitled";

        /// <summary>Whether the title of this tab is autogenerated.</summary>
        public bool IsCustomTitle { get; set; }

        /// <summary>Whether this tab should be closed automatically.</summary>
        public bool AutoClose { get; set; } = false;

        /// <summary>The history of objects opened in this tab.</summary>
        public ObservableCollection<object> History { get; } = new();

        /// <summary>The current position in the opened object history.</summary>
        public int HistoryPosition { get; set; }

        /// <summary>Initializes a new instance of <see cref="Tab"/>.</summary>
        /// <param name="obj">The object that should be open.</param>
        /// <param name="tabIndex">The tab index.</param>
        /// <param name="tabTitle">The tab title.</param>
        public TabViewModel(object obj, int tabIndex, string tabTitle = null, ICommand closeCommand = null)
        {
            CurrentObject = obj;
            CloseCommand = closeCommand;
            AutoClose = obj is DescriptionViewModel;

            IsCustomTitle = tabTitle is not null;
            if (IsCustomTitle)
            {
                if (tabTitle.Length > 64)
                    TabTitle = tabTitle[..64] + "...";
                else
                    TabTitle = tabTitle;
            }
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            // for ease of debugging
            return GetType().FullName + " - {" + CurrentObject?.ToString() + '}';
        }
    }
}
